// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                  String  @id @default(uuid()) @postgresql.Uuid
  firstName           String  @default("") @map("first_name")
  lastName            String  @default("") @map("last_name")
  email               String  @unique @default("")
  password            String
  tracks              Track[] @relation("User_tracks")
  from_Track_author   Track[] @relation("Track_author")
  from_Track_asignees Track[] @relation("Track_asignees")
  from_Skill_author   Skill[] @relation("Skill_author")
}

model Track {
  id               String    @id @default(uuid()) @postgresql.Uuid
  name             String    @default("")
  description      String    @default("")
  author           User?     @relation("Track_author", fields: [authorId], references: [id])
  authorId         String?   @map("author") @postgresql.Uuid
  asignees         User[]    @relation("Track_asignees")
  skills           Skill[]   @relation("Track_skills")
  status           String?   @default("draft")
  created          DateTime? @default(now())
  updated          DateTime? @updatedAt
  from_User_tracks User[]    @relation("User_tracks")

  @@index([authorId])
}

model Skill {
  id                String    @id @default(uuid()) @postgresql.Uuid
  name              String    @default("")
  description       String    @default("")
  author            User?     @relation("Skill_author", fields: [authorId], references: [id])
  authorId          String?   @map("author") @postgresql.Uuid
  tiers             Tier[]    @relation("Skill_tiers")
  created           DateTime? @default(now())
  updated           DateTime? @updatedAt
  from_Track_skills Track[]   @relation("Track_skills")
  from_Tier_skill   Tier[]    @relation("Tier_skill")

  @@index([authorId])
}

model Tier {
  id               String  @id @default(uuid()) @postgresql.Uuid
  name             String  @default("")
  description      String  @default("")
  skill            Skill?  @relation("Tier_skill", fields: [skillId], references: [id])
  skillId          String? @map("skill") @postgresql.Uuid
  from_Skill_tiers Skill[] @relation("Skill_tiers")

  @@index([skillId])
}