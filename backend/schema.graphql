# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  firstName: String
  lastName: String
  email: String
  password: PasswordState
  tracks(
    where: TrackWhereInput! = {}
    orderBy: [TrackOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Track!]
  tracksCount(where: TrackWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  tracks: TrackManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input TrackManyRelationFilter {
  every: TrackWhereInput
  some: TrackWhereInput
  none: TrackWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  tracks: TrackRelateToManyForUpdateInput
}

input TrackRelateToManyForUpdateInput {
  disconnect: [TrackWhereUniqueInput!]
  set: [TrackWhereUniqueInput!]
  create: [TrackCreateInput!]
  connect: [TrackWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  tracks: TrackRelateToManyForCreateInput
}

input TrackRelateToManyForCreateInput {
  create: [TrackCreateInput!]
  connect: [TrackWhereUniqueInput!]
}

type Track {
  id: ID!
  name: String
  description: String
  author: User
  asignees(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  asigneesCount(where: UserWhereInput! = {}): Int
  skills(
    where: SkillWhereInput! = {}
    orderBy: [SkillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Skill!]
  skillsCount(where: SkillWhereInput! = {}): Int
  status: String
  created: DateTime
  updated: DateTime
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input TrackWhereUniqueInput {
  id: ID
}

input TrackWhereInput {
  AND: [TrackWhereInput!]
  OR: [TrackWhereInput!]
  NOT: [TrackWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  author: UserWhereInput
  asignees: UserManyRelationFilter
  skills: SkillManyRelationFilter
  status: StringNullableFilter
  created: DateTimeNullableFilter
  updated: DateTimeNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input SkillManyRelationFilter {
  every: SkillWhereInput
  some: SkillWhereInput
  none: SkillWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TrackOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  status: OrderDirection
  created: OrderDirection
  updated: OrderDirection
}

input TrackUpdateInput {
  name: String
  description: String
  author: UserRelateToOneForUpdateInput
  asignees: UserRelateToManyForUpdateInput
  skills: SkillRelateToManyForUpdateInput
  status: String
  created: DateTime
  updated: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input SkillRelateToManyForUpdateInput {
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

input TrackUpdateArgs {
  where: TrackWhereUniqueInput!
  data: TrackUpdateInput!
}

input TrackCreateInput {
  name: String
  description: String
  author: UserRelateToOneForCreateInput
  asignees: UserRelateToManyForCreateInput
  skills: SkillRelateToManyForCreateInput
  status: String
  created: DateTime
  updated: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input SkillRelateToManyForCreateInput {
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

type Skill {
  id: ID!
  name: String
  description: String
  author: User
  tiers(
    where: TierWhereInput! = {}
    orderBy: [TierOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tier!]
  tiersCount(where: TierWhereInput! = {}): Int
  created: DateTime
  updated: DateTime
}

input SkillWhereUniqueInput {
  id: ID
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  author: UserWhereInput
  tiers: TierManyRelationFilter
  created: DateTimeNullableFilter
  updated: DateTimeNullableFilter
}

input TierManyRelationFilter {
  every: TierWhereInput
  some: TierWhereInput
  none: TierWhereInput
}

input SkillOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  created: OrderDirection
  updated: OrderDirection
}

input SkillUpdateInput {
  name: String
  description: String
  author: UserRelateToOneForUpdateInput
  tiers: TierRelateToManyForUpdateInput
  created: DateTime
  updated: DateTime
}

input TierRelateToManyForUpdateInput {
  disconnect: [TierWhereUniqueInput!]
  set: [TierWhereUniqueInput!]
  create: [TierCreateInput!]
  connect: [TierWhereUniqueInput!]
}

input SkillUpdateArgs {
  where: SkillWhereUniqueInput!
  data: SkillUpdateInput!
}

input SkillCreateInput {
  name: String
  description: String
  author: UserRelateToOneForCreateInput
  tiers: TierRelateToManyForCreateInput
  created: DateTime
  updated: DateTime
}

input TierRelateToManyForCreateInput {
  create: [TierCreateInput!]
  connect: [TierWhereUniqueInput!]
}

type Tier {
  id: ID!
  name: String
  description: String
  skill: Skill
}

input TierWhereUniqueInput {
  id: ID
}

input TierWhereInput {
  AND: [TierWhereInput!]
  OR: [TierWhereInput!]
  NOT: [TierWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  skill: SkillWhereInput
}

input TierOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input TierUpdateInput {
  name: String
  description: String
  skill: SkillRelateToOneForUpdateInput
}

input SkillRelateToOneForUpdateInput {
  create: SkillCreateInput
  connect: SkillWhereUniqueInput
  disconnect: Boolean
}

input TierUpdateArgs {
  where: TierWhereUniqueInput!
  data: TierUpdateInput!
}

input TierCreateInput {
  name: String
  description: String
  skill: SkillRelateToOneForCreateInput
}

input SkillRelateToOneForCreateInput {
  create: SkillCreateInput
  connect: SkillWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTrack(data: TrackCreateInput!): Track
  createTracks(data: [TrackCreateInput!]!): [Track]
  updateTrack(where: TrackWhereUniqueInput!, data: TrackUpdateInput!): Track
  updateTracks(data: [TrackUpdateArgs!]!): [Track]
  deleteTrack(where: TrackWhereUniqueInput!): Track
  deleteTracks(where: [TrackWhereUniqueInput!]!): [Track]
  createSkill(data: SkillCreateInput!): Skill
  createSkills(data: [SkillCreateInput!]!): [Skill]
  updateSkill(where: SkillWhereUniqueInput!, data: SkillUpdateInput!): Skill
  updateSkills(data: [SkillUpdateArgs!]!): [Skill]
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteSkills(where: [SkillWhereUniqueInput!]!): [Skill]
  createTier(data: TierCreateInput!): Tier
  createTiers(data: [TierCreateInput!]!): [Tier]
  updateTier(where: TierWhereUniqueInput!, data: TierUpdateInput!): Tier
  updateTiers(data: [TierUpdateArgs!]!): [Tier]
  deleteTier(where: TierWhereUniqueInput!): Tier
  deleteTiers(where: [TierWhereUniqueInput!]!): [Tier]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  tracks(
    where: TrackWhereInput! = {}
    orderBy: [TrackOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Track!]
  track(where: TrackWhereUniqueInput!): Track
  tracksCount(where: TrackWhereInput! = {}): Int
  skills(
    where: SkillWhereInput! = {}
    orderBy: [SkillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Skill!]
  skill(where: SkillWhereUniqueInput!): Skill
  skillsCount(where: SkillWhereInput! = {}): Int
  tiers(
    where: TierWhereInput! = {}
    orderBy: [TierOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tier!]
  tier(where: TierWhereUniqueInput!): Tier
  tiersCount(where: TierWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
