# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  """
   Return all teams a user is assigned to
  """
  allUserTeams: [Team]
  id: ID!
  firstName: String
  lastName: String
  fullName: String
  email: String
  password: PasswordState
  registered: DateTime
  role: Role
  invitation: Invitation
  createdInvitations(
    where: InvitationWhereInput! = {}
    orderBy: [InvitationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Invitation!]
  createdInvitationsCount(where: InvitationWhereInput! = {}): Int
  authoredTeams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  authoredTeamsCount(where: TeamWhereInput! = {}): Int
  managedTeams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  managedTeamsCount(where: TeamWhereInput! = {}): Int
  assignedTeams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  assignedTeamsCount(where: TeamWhereInput! = {}): Int
  authoredSkills(
    where: SkillWhereInput! = {}
    orderBy: [SkillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Skill!]
  authoredSkillsCount(where: SkillWhereInput! = {}): Int
  authoredLevels(
    where: LevelWhereInput! = {}
    orderBy: [LevelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Level!]
  authoredLevelsCount(where: LevelWhereInput! = {}): Int
  userLevels(
    where: UserLevelWhereInput! = {}
    orderBy: [UserLevelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserLevel!]
  userLevelsCount(where: UserLevelWhereInput! = {}): Int
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  registered: DateTimeNullableFilter
  role: RoleWhereInput
  invitation: InvitationWhereInput
  createdInvitations: InvitationManyRelationFilter
  authoredTeams: TeamManyRelationFilter
  managedTeams: TeamManyRelationFilter
  assignedTeams: TeamManyRelationFilter
  authoredSkills: SkillManyRelationFilter
  authoredLevels: LevelManyRelationFilter
  userLevels: UserLevelManyRelationFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input InvitationManyRelationFilter {
  every: InvitationWhereInput
  some: InvitationWhereInput
  none: InvitationWhereInput
}

input TeamManyRelationFilter {
  every: TeamWhereInput
  some: TeamWhereInput
  none: TeamWhereInput
}

input SkillManyRelationFilter {
  every: SkillWhereInput
  some: SkillWhereInput
  none: SkillWhereInput
}

input LevelManyRelationFilter {
  every: LevelWhereInput
  some: LevelWhereInput
  none: LevelWhereInput
}

input UserLevelManyRelationFilter {
  every: UserLevelWhereInput
  some: UserLevelWhereInput
  none: UserLevelWhereInput
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  registered: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  registered: DateTime
  role: RoleRelateToOneForUpdateInput
  invitation: InvitationRelateToOneForUpdateInput
  createdInvitations: InvitationRelateToManyForUpdateInput
  authoredTeams: TeamRelateToManyForUpdateInput
  managedTeams: TeamRelateToManyForUpdateInput
  assignedTeams: TeamRelateToManyForUpdateInput
  authoredSkills: SkillRelateToManyForUpdateInput
  authoredLevels: LevelRelateToManyForUpdateInput
  userLevels: UserLevelRelateToManyForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input InvitationRelateToOneForUpdateInput {
  create: InvitationCreateInput
  connect: InvitationWhereUniqueInput
  disconnect: Boolean
}

input InvitationRelateToManyForUpdateInput {
  disconnect: [InvitationWhereUniqueInput!]
  set: [InvitationWhereUniqueInput!]
  create: [InvitationCreateInput!]
  connect: [InvitationWhereUniqueInput!]
}

input TeamRelateToManyForUpdateInput {
  disconnect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  create: [TeamCreateInput!]
  connect: [TeamWhereUniqueInput!]
}

input SkillRelateToManyForUpdateInput {
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

input LevelRelateToManyForUpdateInput {
  disconnect: [LevelWhereUniqueInput!]
  set: [LevelWhereUniqueInput!]
  create: [LevelCreateInput!]
  connect: [LevelWhereUniqueInput!]
}

input UserLevelRelateToManyForUpdateInput {
  disconnect: [UserLevelWhereUniqueInput!]
  set: [UserLevelWhereUniqueInput!]
  create: [UserLevelCreateInput!]
  connect: [UserLevelWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  registered: DateTime
  role: RoleRelateToOneForCreateInput
  invitation: InvitationRelateToOneForCreateInput
  createdInvitations: InvitationRelateToManyForCreateInput
  authoredTeams: TeamRelateToManyForCreateInput
  managedTeams: TeamRelateToManyForCreateInput
  assignedTeams: TeamRelateToManyForCreateInput
  authoredSkills: SkillRelateToManyForCreateInput
  authoredLevels: LevelRelateToManyForCreateInput
  userLevels: UserLevelRelateToManyForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

input InvitationRelateToOneForCreateInput {
  create: InvitationCreateInput
  connect: InvitationWhereUniqueInput
}

input InvitationRelateToManyForCreateInput {
  create: [InvitationCreateInput!]
  connect: [InvitationWhereUniqueInput!]
}

input TeamRelateToManyForCreateInput {
  create: [TeamCreateInput!]
  connect: [TeamWhereUniqueInput!]
}

input SkillRelateToManyForCreateInput {
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

input LevelRelateToManyForCreateInput {
  create: [LevelCreateInput!]
  connect: [LevelWhereUniqueInput!]
}

input UserLevelRelateToManyForCreateInput {
  create: [UserLevelCreateInput!]
  connect: [UserLevelWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  asignees(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  asigneesCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  asignees: UserManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
}

input RoleUpdateInput {
  name: String
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  asignees: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  asignees: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Invitation {
  id: ID!
  email: String
  createdBy: User
  created: DateTime
  expires: DateTime
  accepted: DateTime
  expired: Boolean
}

input InvitationWhereUniqueInput {
  id: ID
  email: String
}

input InvitationWhereInput {
  AND: [InvitationWhereInput!]
  OR: [InvitationWhereInput!]
  NOT: [InvitationWhereInput!]
  id: IDFilter
  email: StringFilter
  createdBy: UserWhereInput
  created: DateTimeNullableFilter
  expires: DateTimeFilter
  accepted: DateTimeNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input InvitationOrderByInput {
  id: OrderDirection
  email: OrderDirection
  created: OrderDirection
  expires: OrderDirection
  accepted: OrderDirection
}

input InvitationUpdateInput {
  email: String
  createdBy: UserRelateToOneForUpdateInput
  created: DateTime
  expires: DateTime
  accepted: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input InvitationUpdateArgs {
  where: InvitationWhereUniqueInput!
  data: InvitationUpdateInput!
}

input InvitationCreateInput {
  email: String
  createdBy: UserRelateToOneForCreateInput
  created: DateTime
  expires: DateTime
  accepted: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Team {
  id: ID!
  name: String
  description: String
  created: DateTime
  updated: DateTime
  skills(
    where: SkillWhereInput! = {}
    orderBy: [SkillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Skill!]
  skillsCount(where: SkillWhereInput! = {}): Int
  levels(
    where: LevelWhereInput! = {}
    orderBy: [LevelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Level!]
  levelsCount(where: LevelWhereInput! = {}): Int
  author: User
  managers(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  managersCount(where: UserWhereInput! = {}): Int
  members(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  membersCount(where: UserWhereInput! = {}): Int
  userLevels(
    where: UserLevelWhereInput! = {}
    orderBy: [UserLevelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserLevel!]
  userLevelsCount(where: UserLevelWhereInput! = {}): Int
  currentUserIsAuthor: Boolean
  currentUserIsManager: Boolean
}

input TeamWhereUniqueInput {
  id: ID
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  created: DateTimeNullableFilter
  updated: DateTimeNullableFilter
  skills: SkillManyRelationFilter
  levels: LevelManyRelationFilter
  author: UserWhereInput
  managers: UserManyRelationFilter
  members: UserManyRelationFilter
  userLevels: UserLevelManyRelationFilter
}

input TeamOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  created: OrderDirection
  updated: OrderDirection
}

input TeamUpdateInput {
  name: String
  description: String
  created: DateTime
  updated: DateTime
  skills: SkillRelateToManyForUpdateInput
  levels: LevelRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  managers: UserRelateToManyForUpdateInput
  members: UserRelateToManyForUpdateInput
  userLevels: UserLevelRelateToManyForUpdateInput
}

input TeamUpdateArgs {
  where: TeamWhereUniqueInput!
  data: TeamUpdateInput!
}

input TeamCreateInput {
  name: String
  description: String
  created: DateTime
  updated: DateTime
  skills: SkillRelateToManyForCreateInput
  levels: LevelRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  managers: UserRelateToManyForCreateInput
  members: UserRelateToManyForCreateInput
  userLevels: UserLevelRelateToManyForCreateInput
}

type Skill {
  id: ID!
  name: String
  description: String
  created: DateTime
  updated: DateTime
  author: User
  team: Team
  levels(
    where: LevelWhereInput! = {}
    orderBy: [LevelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Level!]
  levelsCount(where: LevelWhereInput! = {}): Int
  userLevels(
    where: UserLevelWhereInput! = {}
    orderBy: [UserLevelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserLevel!]
  userLevelsCount(where: UserLevelWhereInput! = {}): Int
}

input SkillWhereUniqueInput {
  id: ID
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  created: DateTimeNullableFilter
  updated: DateTimeNullableFilter
  author: UserWhereInput
  team: TeamWhereInput
  levels: LevelManyRelationFilter
  userLevels: UserLevelManyRelationFilter
}

input SkillOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  created: OrderDirection
  updated: OrderDirection
}

input SkillUpdateInput {
  name: String
  description: String
  created: DateTime
  updated: DateTime
  author: UserRelateToOneForUpdateInput
  team: TeamRelateToOneForUpdateInput
  levels: LevelRelateToManyForUpdateInput
  userLevels: UserLevelRelateToManyForUpdateInput
}

input TeamRelateToOneForUpdateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
}

input SkillUpdateArgs {
  where: SkillWhereUniqueInput!
  data: SkillUpdateInput!
}

input SkillCreateInput {
  name: String
  description: String
  created: DateTime
  updated: DateTime
  author: UserRelateToOneForCreateInput
  team: TeamRelateToOneForCreateInput
  levels: LevelRelateToManyForCreateInput
  userLevels: UserLevelRelateToManyForCreateInput
}

input TeamRelateToOneForCreateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
}

type Level {
  id: ID!
  name: String
  description: String
  level: Int
  created: DateTime
  updated: DateTime
  author: User
  team: Team
  skill: Skill
  userLevels(
    where: UserLevelWhereInput! = {}
    orderBy: [UserLevelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserLevel!]
  userLevelsCount(where: UserLevelWhereInput! = {}): Int
}

input LevelWhereUniqueInput {
  id: ID
}

input LevelWhereInput {
  AND: [LevelWhereInput!]
  OR: [LevelWhereInput!]
  NOT: [LevelWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  level: IntFilter
  created: DateTimeNullableFilter
  updated: DateTimeNullableFilter
  author: UserWhereInput
  team: TeamWhereInput
  skill: SkillWhereInput
  userLevels: UserLevelManyRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input LevelOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  level: OrderDirection
  created: OrderDirection
  updated: OrderDirection
}

input LevelUpdateInput {
  name: String
  description: String
  level: Int
  created: DateTime
  updated: DateTime
  author: UserRelateToOneForUpdateInput
  team: TeamRelateToOneForUpdateInput
  skill: SkillRelateToOneForUpdateInput
  userLevels: UserLevelRelateToManyForUpdateInput
}

input SkillRelateToOneForUpdateInput {
  create: SkillCreateInput
  connect: SkillWhereUniqueInput
  disconnect: Boolean
}

input LevelUpdateArgs {
  where: LevelWhereUniqueInput!
  data: LevelUpdateInput!
}

input LevelCreateInput {
  name: String
  description: String
  level: Int
  created: DateTime
  updated: DateTime
  author: UserRelateToOneForCreateInput
  team: TeamRelateToOneForCreateInput
  skill: SkillRelateToOneForCreateInput
  userLevels: UserLevelRelateToManyForCreateInput
}

input SkillRelateToOneForCreateInput {
  create: SkillCreateInput
  connect: SkillWhereUniqueInput
}

type UserLevel {
  id: ID!
  user: User
  level: Level
  team: Team
  skill: Skill
  created: DateTime
  updated: DateTime
}

input UserLevelWhereUniqueInput {
  id: ID
}

input UserLevelWhereInput {
  AND: [UserLevelWhereInput!]
  OR: [UserLevelWhereInput!]
  NOT: [UserLevelWhereInput!]
  id: IDFilter
  user: UserWhereInput
  level: LevelWhereInput
  team: TeamWhereInput
  skill: SkillWhereInput
  created: DateTimeNullableFilter
  updated: DateTimeNullableFilter
}

input UserLevelOrderByInput {
  id: OrderDirection
  created: OrderDirection
  updated: OrderDirection
}

input UserLevelUpdateInput {
  user: UserRelateToOneForUpdateInput
  level: LevelRelateToOneForUpdateInput
  team: TeamRelateToOneForUpdateInput
  skill: SkillRelateToOneForUpdateInput
  created: DateTime
  updated: DateTime
}

input LevelRelateToOneForUpdateInput {
  create: LevelCreateInput
  connect: LevelWhereUniqueInput
  disconnect: Boolean
}

input UserLevelUpdateArgs {
  where: UserLevelWhereUniqueInput!
  data: UserLevelUpdateInput!
}

input UserLevelCreateInput {
  user: UserRelateToOneForCreateInput
  level: LevelRelateToOneForCreateInput
  team: TeamRelateToOneForCreateInput
  skill: SkillRelateToOneForCreateInput
  created: DateTime
  updated: DateTime
}

input LevelRelateToOneForCreateInput {
  create: LevelCreateInput
  connect: LevelWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createInvitation(data: InvitationCreateInput!): Invitation
  createInvitations(data: [InvitationCreateInput!]!): [Invitation]
  updateInvitation(
    where: InvitationWhereUniqueInput!
    data: InvitationUpdateInput!
  ): Invitation
  updateInvitations(data: [InvitationUpdateArgs!]!): [Invitation]
  deleteInvitation(where: InvitationWhereUniqueInput!): Invitation
  deleteInvitations(where: [InvitationWhereUniqueInput!]!): [Invitation]
  createTeam(data: TeamCreateInput!): Team
  createTeams(data: [TeamCreateInput!]!): [Team]
  updateTeam(where: TeamWhereUniqueInput!, data: TeamUpdateInput!): Team
  updateTeams(data: [TeamUpdateArgs!]!): [Team]
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeams(where: [TeamWhereUniqueInput!]!): [Team]
  createSkill(data: SkillCreateInput!): Skill
  createSkills(data: [SkillCreateInput!]!): [Skill]
  updateSkill(where: SkillWhereUniqueInput!, data: SkillUpdateInput!): Skill
  updateSkills(data: [SkillUpdateArgs!]!): [Skill]
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteSkills(where: [SkillWhereUniqueInput!]!): [Skill]
  createLevel(data: LevelCreateInput!): Level
  createLevels(data: [LevelCreateInput!]!): [Level]
  updateLevel(where: LevelWhereUniqueInput!, data: LevelUpdateInput!): Level
  updateLevels(data: [LevelUpdateArgs!]!): [Level]
  deleteLevel(where: LevelWhereUniqueInput!): Level
  deleteLevels(where: [LevelWhereUniqueInput!]!): [Level]
  createUserLevel(data: UserLevelCreateInput!): UserLevel
  createUserLevels(data: [UserLevelCreateInput!]!): [UserLevel]
  updateUserLevel(
    where: UserLevelWhereUniqueInput!
    data: UserLevelUpdateInput!
  ): UserLevel
  updateUserLevels(data: [UserLevelUpdateArgs!]!): [UserLevel]
  deleteUserLevel(where: UserLevelWhereUniqueInput!): UserLevel
  deleteUserLevels(where: [UserLevelWhereUniqueInput!]!): [UserLevel]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  invitations(
    where: InvitationWhereInput! = {}
    orderBy: [InvitationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Invitation!]
  invitation(where: InvitationWhereUniqueInput!): Invitation
  invitationsCount(where: InvitationWhereInput! = {}): Int
  teams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  team(where: TeamWhereUniqueInput!): Team
  teamsCount(where: TeamWhereInput! = {}): Int
  skills(
    where: SkillWhereInput! = {}
    orderBy: [SkillOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Skill!]
  skill(where: SkillWhereUniqueInput!): Skill
  skillsCount(where: SkillWhereInput! = {}): Int
  levels(
    where: LevelWhereInput! = {}
    orderBy: [LevelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Level!]
  level(where: LevelWhereUniqueInput!): Level
  levelsCount(where: LevelWhereInput! = {}): Int
  userLevels(
    where: UserLevelWhereInput! = {}
    orderBy: [UserLevelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserLevel!]
  userLevel(where: UserLevelWhereUniqueInput!): UserLevel
  userLevelsCount(where: UserLevelWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
